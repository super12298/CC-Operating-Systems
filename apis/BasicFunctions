--Basic Functions API 
-----------------------------------
--Config (nul or blank == off and 1 == on)
debug = nul
-----------------------------------
local nTime = os.time()
local nDay = os.day()
local nID = os.getComputerID()
local nLabel = os.getComputerLabel()
local nOS = os.version()
local x,y = term.getSize()
local COS = {"CraftOS 1.8", "CraftOS 1.7", "CraftOS 1.6", "CraftOS 1.5", "CraftOS 1.4", "CraftOS 1.3", "CraftOS 1.2", "CraftOS 1.1", "CraftOS 1.0"}

--This is a test function
function cdwn()
rn = 8
for i=1,rn do
print(rn)
rn = rn-1
end
end

if not debug then
os.pullEvent = os.pullEventRaw
sleep(.3)
end

--Reboot with a countdown!
--usage BFS.sdc(x,y)
function sdc(x,y)
timer = 5
	for i=1,timer do
		term.setCursorPos(x,y)
		print("Rebooting in "..timer.."...")
		sleep(1)
	timer = timer-1
end
os.reboot()
end


--Downloads Files from any source
--usage BFS.df("url", "path")
function df(url, path, wdl)
local check, msg = http.checkURL(url)
if not check then
write("Invalid URL: Error[" .. msg.."]")
else
if path == nul or path == "" or path == "/" then
write("Invalid Path")
else
	for i = 1, 3 do
	local response = http.get(url)
		if response then
		local data = response.readAll()
				if path then
				local f = io.open(path, "w")
				--print(url, wdl)
				sleep(.1)
				if wdl then
				f:write(wdl.."\n")
				end
				f:write(data)
				f:close()
				end
			return true
			end
		end
	return false
end
end
end

--[Advance] Downloads Files from any source
--usage BFS.dfa("url", "backupurl", "path")
function dfa(original, backup, path)
local ch3ck, msag = http.checkURL(original)
if not fs.exists(path) then
if ch3ck then
df(original, path)
else
df(backup, path)
end
end
end

local function getDeviceSide(deviceType)
  local lstSides = {"left","right","up","down","front","back"};
  for i, side in pairs(lstSides) do
    if (peripheral.isPresent(side)) then
      if (peripheral.getType(side) == string.lower(deviceType)) then
        return side;
      end
    end
  end
  return nil;
end

--Makes directory
--usage BFS.md(directory you want to make)
function md(dir)
	if not fs.exists(dir) then
	fs.makeDir(dir)
	else
	--print(dir.." already exist!")
	end
end 

--Detects Rednet and turns it on("true") or off("false")
--usage BFS.rd("true")
function rd(quest)
if nOS == COS[3] or nOS == COS[4] then

else
modemSide = getDeviceSide("modem")
	if quest == "true" then
		if (modemSide) then
		rednet.open(modemSide)
		end
	else
	rednet.close(modemSide)
	end
end
end

--This function draws a image
--usage BFS.dg("path", sleeptimeinseconds)
function dg(path, speed)
if term.isColor() then
BGL = paintutils.loadImage(path) 
paintutils.drawImage(BGL,1,1)
else
local pic = fs.open(path, "r")
local pic2 = pic.readAll()
term.clear()
term.setCursorPos(1,1)
--print(pic2)
pic.close()
end
sleep(speed)
end

--This Function prints the content of a page
--usage BFS.getlog("path")
function getlog(path)
local log = http.get(path) --Get contents of page
local log2 = log.readAll()
print(log2)
end

--OS function that updates the system
--Usage BFS.verc("versionpath", "versionurl", "updatelocation", "updateurl")
function verc(path, url, updl, updp, word)
http.request(url)
local requesting = true
local event, url, sourceText = os.pullEvent()
 if event == "http_success" then
	if not fs.exists(path) or not fs.exists(updl)then
	df(updp, updl, word)
	df(url, path)
	os.run({},updl)
	--fs.delete(updl)
	print("Successfully updated!")	
	else
	local vnid = http.get(url)
	local rvnid = vnid.readAll()
		if fs.exists(path) then
		local readvn = fs.open(path, "r")
		local readvern = readvn.readAll()
		readvn.close()
		vn = readvern
			if vn == rvnid then
			--fs.delete(updl)
			print("The software on this computer is up to date.")
			else
			df(updp, updl)
			df(url, path)
			os.run({},updl)
			--fs.delete(updl)
			print("Successfully updated!")	
			end
		end
	end

elseif event == "http_failure" then
print("404 Page Not Found")
end
end

--Disables or Enables the disk startup.
--usage BFS.DiskS(false) or BFS.DiskS(true)
function DiskS(quest)
if nOS == COS[3] or nOS == COS[4] then
print("["..nOS.."]: Compatibility mode activated.")
sleep(.3)
else
bootFromDisk = settings.get("shell.allow_disk_startup", "not set")
if debug then
print(bootFromDisk)
end
if bootFromDisk == true then
settings.set("shell.allow_disk_startup", quest)
settings.save(".settings")
end
end
end

--Compairs the udid nothing special.
function Comp_udid(path, errorimg)
if fs.exists(path) then
	local fr = fs.open(path, "r")
	udid1 = fr.readAll()
	if fs.exists(path..".ref") then
		local gf = fs.open(path..".ref", "r")
		udid2 = gf.readAll()	
	else		
	udid2 = "NONE"
	end
 	test = udid1
	if udid1 == udid2 then
	else
	dg(errorimg, 0)
		term.setCursorPos(1,1)
	print("[Error]")
	sleep(10)
	os.reboot()
	end
	fr.close()
	--gf.close()
	end
end

--Generates a unique id for the computer (You can use this to make a unique rednet id) and will check (if you put true) if it has been tampered it will prevent the computer from booting.
--  change 'compair' to true or false
--Usage BFS.udid("Codename", "path", "Compair". )
function udid(name, path)
	if not fs.exists(path) then
	local f = io.open(path, "w")
	f:write(name)
		for i = 1, 25 do
		local items = {"a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","0","1","2","3","4","5","6","7","8","9"}
		f:write(items[math.random(1, #items)])
		end
	f:close()
	if fs.exists(path..".ref") then
	os.reboot()
	else
	fs.copy(path, path..".ref")
	end
	end
end
--Displays the computer label and id
--Usage BFS.dply(5,8)
function dply(x,y)
	term.setCursorPos(x,y)
	if nLabel then
	print("Computer:"..nLabel..","..nID)
	else
	print("Computer: [N/A],"..nID)
	end
end

--Text with location
--Usage BFS.tpla(5,8,txt)
function tpla(x,y,txt)
	term.setCursorPos(x,y)
	print(txt)
end

--read file and prints it to a location
--Usage   readfile(1,4,/some/file/data)
function readfile(x,y,file)
term.setCursorPos(x,y)
local readfl = fs.open(file, "r")
readallfl = readfl.readAll()
readfl.close()
print(readallfl)
end

--used for change log 'slow' or 'fast'
--function BFS.chlog("url","slow")
function chlog(url,printsp)
success, message = http.get(url)
if success then
datard1 = http.get(url)
datard2 = datard1.readAll()
if printsp =="fast" then
print(datard2)
elseif printsp =="slow" then
textutils.slowPrint(datard2)
else
error("Incorrect format. \n[Usage]:\nBFS.chlog('url','slow') \nBFS.chlog('url','fast') ")
end
else
print("404 Page not found.")
end
end

--compares HTML and file
--Usage BFS.chaf(url, path)
function chaf(url, path)
	local vnid = http.get(url)
	local rvnid = vnid.readAll()
		if fs.exists(path) then
		local readvn = fs.open(path, "r")
		local readvern = readvn.readAll()
		readvn.close()
		vn = readvern
			if vn == rvnid then
			print(path.."...OK")
			sleep(.1)
			else
			df(url, path)
			print(path.." has been updated!")
			sleep(.1)
			end
		end
end

--sets a label
--Usage BFS.setl("Comp_2")
function setl(name)
if os.getComputerLabel() == nul then
os.setComputerLabel(name)
end
end

--reads a file or website and turns it into a table
--Usage BFS.rwf("File location or website url", "file") <-- put the word |"file" or "f"| or |"website" or "w"|
function rwf(fw, worf)
totallines = 0
if worf == "website" or worf == "w" then
readfw = http.get(fw)
elseif worf == "file" or worf == "f" then
readfw = fs.open( fw, "r" )
else
error("")
end

lines = {}
for line in readfw.readLine do
totallines = totallines+1
    lines[#lines+1] = line
end
readfw.close()
end

--prints a line from file or website
--Usage BFS.printline(#)
function printline(n)
return lines[n]
end

--Downloads using a line from file or website(1). The second number is the location(2).
--Usage BFS.printline(#, #)
function downloadurl(n, l)
df(lines[n], lines[l])
end
------------------------------------------------------------------------------------
local function enc(str, key)
	if not key then return false end
	local f = ""
	local kb = {}
	for i = 1, #key do
		kb[i] = string.byte(key:sub(i,i)) - 31
	end
	local c = 1
	for i = 1, #str do
		local t1 = string.byte(str:sub(i,i))
		if t1 == 10 then
			f = f .. string.char(10)
		else
			local t2 = t1 + kb[c]
			if t2 > 126 then
				local t3 = t2 - 126
				t2 = 31 + t3
			end
		f = f .. string.char(t2)
		end
		c = c + 1
		if c > #key then
			c = 1
		end
	end
	return f
end

local function dec(str, key)
	if not key then return false end
	local f = ""
	local kb = {}
	for i = 1, #key do
		kb[i] = string.byte(key:sub(i,i)) - 31
	end
	local c = 1
	for i = 1, #str do
		local t2 = string.byte(str:sub(i,i)) - 31
		if t2 == -21 then
			f = f .. string.char(10)
		else
			local t3 = t2 - kb[c] + 31
			if t3 < 32 then
				t3 = t3 + 126 - 31
			end
			if t3 < 32 then return false, t3 end
			if t3 > 126 then return false, t3 end
			f = f .. string.char(t3)
		end
		c = c + 1
		if c > #key then
			c = 1
		end
	end
	return f
end

--encrypts a word using a password
function encr(str, key)
if str == nil or str == " " then
return nLabel
else
	if not key then return false end
	if #key < 3 then return false end
	local f = str
	key = key .. key .. "#me1"
	for i = 0, #key - 1 do
		f = enc(f, key:sub(i,i + 1))
	end
	f = enc(f, key:sub(1,2) .. key:sub(#key - 1, #key) .. enc(key, key .. key))
	return f
end
end
--decrypts a word using a password
function decr(str, key)
if str == nil or str == " " then
return nLabel
else
	if not key then return false end
	if #key < 3 then return false end
	local f = str
	key = key .. key .. "#me1"
	for i = 0, #key - 1 do
		f = dec(f, key:sub(i,i + 1))
	end
	f = dec(f, key:sub(1,2) .. key:sub(#key - 1, #key) .. enc(key, key .. key))
	return f
end
end
--------------------------------------------------------------------------------------

--turns string into individual characters
--Usage BFS.chars(str)
function chars(str)
    strc = {}
		for i = 1, #str do
		table.insert(strc, string.sub(str, i, i))
		end
    return strc
end

function testchars(string)
	chars(string)
	for i = 1, #str do
		if strc[i] == nil then
	
		else
		print(strc[i])
		end
	end
end

function drawchars(string)
chars(string)
for i = 1, x do
if strc[i] == nil then
elseif strc[i] == " " then
else
if strc[i] == "0" then
term.setBackgroundColour(1)
elseif strc[i] == "1" then
term.setBackgroundColour(2)
elseif strc[i] == "2" then
term.setBackgroundColour(4)
elseif strc[i] == "3" then
term.setBackgroundColour(8)
elseif strc[i] == "4" then
term.setBackgroundColour(16)
elseif strc[i] == "5" then
term.setBackgroundColour(32)
elseif strc[i] == "6" then
term.setBackgroundColour(64)
elseif strc[i] == "7" then
term.setBackgroundColour(128)
elseif strc[i] == "8" then
term.setBackgroundColour(256)
elseif strc[i] == "9" then
term.setBackgroundColour(512)
elseif strc[i] == "a" then
term.setBackgroundColour(1024)
elseif strc[i] == "b" then
term.setBackgroundColour(2048)
elseif strc[i] == "c" then
term.setBackgroundColour(4096)
elseif strc[i] == "d" then
term.setBackgroundColour(8192)
elseif strc[i] == "e" then
term.setBackgroundColour(16384)
elseif strc[i] == "f" then
term.setBackgroundColour(32768)
end
if strc[i] == nil then
elseif strc[i] == " " then
else
term.write(" ")
end
end
end
end

function drawimg(weborfile,wof)
BFS.rwf(weborfile,wof)
for v = 1,totallines do
term.setCursorPos(1,v)
drawchars(lines[v])
end
end

function loadimages(number, filnam, Dos)
z = 1
for i=1,number do
if filnam[i] == " " then
sleep(.1)
else
term.setCursorPos(1,z)
BFS.drawchars(filnam[i])
if Dos == true then
sleep(0)
end
z = z+1
if z > y then 
z = 1
end
end
end
end
--BFS.merge(errorlogo, 19, 10, 1)
--BFS.merge(bootlogo, 19, 19, 11)
function breakbg(src, numb, numb2, start)
if start == nil then
start = 1
end
for i = start,numb2 do
term.setCursorPos(1,i)
c = math.random(1, numb)
BFS.drawchars(src[c])
end
end

function merge(src, numb, numb2, start)
if start == nil then
start = 1
end
for i = start,numb2 do
term.setCursorPos(1,i)
BFS.drawchars(src[i])
end
end

function udidv2(path)
	if not fs.exists(path) then
	local f = io.open(path, "w")
		for i = 1, 40 do
		local items = {"a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","0","1","2","3","4","5","6","7","8","9","@","#","$","%","&","*"}
		f:write(items[math.random(1, #items)])
		end
		f:write("\nPC-")
	for i = 1, math.random(0, 15) do
	local items2 = {"1","2","3","4","5","6","7","8","9","0"}
		f:write(items2[math.random(1, #items2)])
	end
f:close()
end
end
